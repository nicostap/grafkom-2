/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 .\victim2.glb --types --transform 
Files: .\victim2.glb [59.13MB] > C:\Users\Nathan Adhitya\Documents\victim2-transformed.glb [2.39MB] (96%)
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { GroupProps } from "@react-three/fiber";

type GLTFResult = GLTF & {
    nodes: {
        Ch31_Body: THREE.SkinnedMesh;
        Ch31_Collar: THREE.SkinnedMesh;
        Ch31_Eyelashes: THREE.SkinnedMesh;
        Ch31_Hair: THREE.SkinnedMesh;
        Ch31_Pants: THREE.SkinnedMesh;
        Ch31_Shoes: THREE.SkinnedMesh;
        Ch31_Sweater: THREE.SkinnedMesh;
        mixamorig9Hips: THREE.Bone;
    };
    materials: {
        Ch31_body: THREE.MeshStandardMaterial;
        Ch31_hair: THREE.MeshStandardMaterial;
    };
    animations: GLTFAction[];
};

type ActionName =
    | "Armature.004|mixamo.com|Layer0"
    | "Drinking"
    | "DrunkIdle"
    | "DrunkWalking"
    | "Idle"
    | "Running"
    | "Sleeping"
    | "Walking"
    | "Walking.001"
    | "WalkingBackwards";

interface GLTFAction extends THREE.AnimationClip {
    name: ActionName;
}

type ContextType = Record<
    string,
    React.ForwardRefExoticComponent<
        JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
    >
>;

interface VictimProps extends GroupProps {
    activeAction?: ActionName;
}

export function Victim(props: VictimProps) {
    const group = useRef<THREE.Group>(null);
    const { nodes, materials, animations } = useGLTF(
        "/victim2-transformed.glb"
    ) as GLTFResult;
    const { actions } = useAnimations<GLTFAction>(animations, group);
    const activeAction = props.activeAction ?? "Idle";

    actions.DrunkWalking?.setEffectiveTimeScale(0.5);

    useEffect(() => {
        actions[activeAction]?.reset().fadeIn(0.5).play();

        return () => {
            actions[activeAction]?.fadeOut(0.5);
        };
    }, [activeAction, actions]);

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Armature"
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                >
                    <primitive object={nodes.mixamorig9Hips} />
                </group>
                <skinnedMesh
                    name="Ch31_Body"
                    geometry={nodes.Ch31_Body.geometry}
                    material={materials.Ch31_body}
                    skeleton={nodes.Ch31_Body.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
                <skinnedMesh
                    name="Ch31_Collar"
                    geometry={nodes.Ch31_Collar.geometry}
                    material={materials.Ch31_body}
                    skeleton={nodes.Ch31_Collar.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
                <skinnedMesh
                    name="Ch31_Eyelashes"
                    geometry={nodes.Ch31_Eyelashes.geometry}
                    material={materials.Ch31_hair}
                    skeleton={nodes.Ch31_Eyelashes.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
                <skinnedMesh
                    name="Ch31_Hair"
                    geometry={nodes.Ch31_Hair.geometry}
                    material={materials.Ch31_hair}
                    skeleton={nodes.Ch31_Hair.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
                <skinnedMesh
                    name="Ch31_Pants"
                    geometry={nodes.Ch31_Pants.geometry}
                    material={materials.Ch31_body}
                    skeleton={nodes.Ch31_Pants.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
                <skinnedMesh
                    name="Ch31_Shoes"
                    geometry={nodes.Ch31_Shoes.geometry}
                    material={materials.Ch31_body}
                    skeleton={nodes.Ch31_Shoes.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
                <skinnedMesh
                    name="Ch31_Sweater"
                    geometry={nodes.Ch31_Sweater.geometry}
                    material={materials.Ch31_body}
                    skeleton={nodes.Ch31_Sweater.skeleton}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                    receiveShadow
                    castShadow
                />
            </group>
        </group>
    );
}

useGLTF.preload("/victim2-transformed.glb");
